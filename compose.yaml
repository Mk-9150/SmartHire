# version: "20.1.2"
services:
  kafka-1:
    image: apache/kafka:3.7.0
    hostname: kafka-1
    container_name: kafka-1
    ports:
      - 29092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_MIN_INSYNC_REPLICAS: 2 
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'

  kafka-2:
    image: apache/kafka:3.7.0
    hostname: kafka-2
    container_name: kafka-2
    ports:
      - 39092:9092
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:19092,PLAINTEXT_HOST://localhost:39092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_MIN_INSYNC_REPLICAS: 2 
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'

  kafka-3:
    image: apache/kafka:3.7.0
    hostname: kafka-3
    container_name: kafka-3
    ports:
      - 49092:9092
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:19092,PLAINTEXT_HOST://localhost:49092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_MIN_INSYNC_REPLICAS: 2 
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'

  kafka-ui:
      image: provectuslabs/kafka-ui
      container_name: kafka-ui
      ports:
        - "8080:8080"
      environment:
        KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka-1:19092'
        DYNAMIC_CONFIG_ENABLED: "true"
      depends_on:
        - kafka-1    
  
  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8081:8081"

    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-1:19092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_DEBUG: true
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  

  api:
    build:
      context: ./post_service
      dockerfile: Dockerfile
    container_name: postservce  
    volumes:
        - ./post_service:/code  # Sync local development directory with the container  
    depends_on:
        - postgres_db
        - kafka-1
        - kafka-2
        - kafka-3 
        - schema-registry

    ports:
      - "8000:8000"  # Expose container port 8000 to host port 8000  
    # networks:
    #   - my-api-net

  postgres_db:
    image: postgres:16  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresContt
    environment:
        - POSTGRES_USER=zain
        - POSTGRES_PASSWORD=postpass
        - POSTGRES_DB=postservice
    ports:
        - '5434:5432'
    volumes:
        - postgres_db:/var/lib/postgresql/data    
  api2:
    build:
      context: ./likeComment_service
      dockerfile: Dockerfile
    container_name: likecommentService  
    volumes:
        - ./likeComment_service:/code  # Sync local development directory with the container  
    depends_on:
        - postgres_db2
        - kafka-1
        - kafka-2
        - kafka-3 
        - schema-registry

    ports:
      - "8001:8000"  # Expose container port 8000 to host port 8000  
    # networks:
    #   - my-api-net

  postgres_db2:
    image: postgres:16  # Use the official PostgreSQL image
    restart: always
    container_name: lkcmtContt
    environment:
        - POSTGRES_USER=likecmt
        - POSTGRES_PASSWORD=likecmtpass
        - POSTGRES_DB=lkcmtservice
    ports:
        - '5433:5432'
    volumes:
        - postgres_db2:/var/lib/postgresql/data    
    #     - postgres_db:/var/lib/postgresql/data
    # networks:
    #   - my-api-net  
    # volumes:  

  api3:
    build:
      context: ./user_Auth_service
      dockerfile: Dockerfile
    container_name: UserAuth  
    volumes:
        - ./user_Auth_service:/code  # Sync local development directory with the container  
    depends_on:
        - postgres_db3
        - kafka-1
        - kafka-2
        - kafka-3 
        - schema-registry

    ports:
      - "8002:8000"  # Expose container port 8000 to host port 8000  
    # networks:
    #   - my-api-net


  postgres_db3:
    image: postgres:16  # Use the official PostgreSQL image
    restart: always
    container_name: UserAuthService
    environment:
        - POSTGRES_USER=uauth
        - POSTGRES_PASSWORD=uauthpass
        - POSTGRES_DB=uauthdb
    ports:
        - '5435:5432'
    volumes:
        - postgres_db3:/var/lib/postgresql/data    
    #     - postgres_db:/var/lib/postgresql/data
    # networks:
    #   - my-api-net  
    # volumes:  


  api4:
    build:
      context: ./emailService
      dockerfile: Dockerfile
    container_name: emailservice  
    volumes:
        - ./emailService:/code  # Sync local development directory with the container  
    # depends_on:
    #     - postgres_db3
    #     - kafka-1
    #     - kafka-2
    #     - kafka-3 
    #     - schema-registry

    ports:
      - "8003:8000"  # Expose container port 8000 to host port 8000  
    # networks:
    #   - my-api-net
  api5:
    build:
      context: ./profile_management_service
      dockerfile: Dockerfile
    container_name: profileServce  
    volumes:
        - ./profile_management_service:/code  # Sync local development directory with the container  
    depends_on:
        - postgres_db4
        - kafka-1
        - kafka-2
        - kafka-3 
        - schema-registry

    ports:
      - "8004:8000"  # Expose container port 8000 to host port 8000  
    # networks:
    #   - my-api-net

  postgres_db4:
    image: postgres:16  # Use the official PostgreSQL image
    restart: always
    container_name: ProfileService
    environment:
        - POSTGRES_USER=uprofile
        - POSTGRES_PASSWORD=profilepass
        - POSTGRES_DB=profiledb
    ports:
        - '5436:5432'
    volumes:
        - postgres_db4:/var/lib/postgresql/data    
    #     - postgres_db:/var/lib/postgresql/data
    # networks:
    #   - my-api-net  
    # volumes:  
  api6:
    build:
      context: ./feedService
      dockerfile: Dockerfile
    container_name: feedServce  
    volumes:
        - ./feedService:/code  # Sync local development directory with the container  
    depends_on:
        - postgres_db5
        - kafka-1
        - kafka-2
        - kafka-3 
        - schema-registry

    ports:
      - "8005:8000"  # Expose container port 8000 to host port 8000  
    # networks:
    #   - my-api-net

  postgres_db5:
    image: postgres:16  # Use the official PostgreSQL image
    restart: always
    container_name: feedSrviceCont
    environment:
        - POSTGRES_USER=feedServiceUser
        - POSTGRES_PASSWORD=feedpass
        - POSTGRES_DB=feeddb
    ports:
        - '5437:5432'
    volumes:
        - postgres_db5:/var/lib/postgresql/data    
    #     - postgres_db:/var/lib/postgresql/data
    # networks:
    #   - my-api-net  
    # volumes:  
  api7:
    build:
      context: ./uni_profile_management_service
      dockerfile: Dockerfile
    container_name: uniProfileService  
    volumes:
        - ./uni_profile_management_service:/code  # Sync local development directory with the container  
    depends_on:
        - postgres_db6
        - kafka-1
        - kafka-2
        - kafka-3 
        - schema-registry

    ports:
      - "8006:8000"  # Expose container port 8000 to host port 8000  
    # networks:
    #   - my-api-net
  postgres_db6:
    image: postgres:16  # Use the official PostgreSQL image
    restart: always
    container_name: uniProfileSrviceCont
    environment:
        - POSTGRES_USER=uniPfileServiceUser
        - POSTGRES_PASSWORD=unipflpass
        - POSTGRES_DB=uniprofiledb
    ports:
        - '5438:5432'
    volumes:
        - postgres_db6:/var/lib/postgresql/data    
    #     - postgres_db:/var/lib/postgresql/data
    # networks:
    #   - my-api-net  
    # volumes:  


volumes:
  postgres_db:
    driver: local
  postgres_db2:
    driver: local
  postgres_db3:
    driver: local
  postgres_db4:
    driver: local
  postgres_db5:
    driver: local
  postgres_db6:
    driver: local

networks:
  default:
    driver: bridge







# api:
    # build:
      # context: ./todo
      # dockerfile: Dockerfile.dev
    # volumes:
    #   - ./todo:/code  # Sync local development directory with the container
    # depends_on:
    #     - postgres_db
    #     - broker
    # ports:
    #   - "8000:8000" 
    